//-------------------------------------------------------bubble sort------------------------------------------------------


void bubble_sort(int *p,int length)
{
    int i,j,temp;
    for(i = 0;i<length;i++)
    {
        for(j = 0;j<length-i-1;j++)
        {
            if(p[j]>p[j+1])
            {
                temp = p[j];
                p[j] = p[j+1];
                p[j+1] = temp;
            }

        }

    }

}

//--------------------------------------------insert sort -------------------------------
//like sort a hand of cards,when add a new one(i move forward),move the number who bigger than p[i] to the right
//especially notify the begining,i starts at 1,not 0,and j must above or equal 0

void insert_sort(int *p,int length)
{
   int i,temp,j;

   for(i = 1;i<length;i++)
   {
        temp = p[i];
        j = i-1;
        while(j>=0&&p[j]>temp)
        {
            p[j+1] = p[j];
            j--;
        }
        p[j+1] = temp;

   }

}

//----------------------------------------shell sort----------------------------------
//希尔排序是插入排序的进化版时间复杂度突破n^2  gap 是精华，这里的算法实现不是按照gap来分一组，一组一组的
//插入排序做完，从for循环可以看出，当i++后，并不是原gap组的元素
void shell_sort(int *p,int length)
{
    int gap = length/2;
    int i,j,temp;
    while(gap>=1)
    {
        for(i = gap;i<length;i++)
        {
            temp = p[i];
            j = i-gap;
            while(j>=0&&p[j]>temp)
            {
                p[j+gap] = p[j];
                j = j-gap;
            }
            p[j+gap] = temp;

        }
        gap = gap/2;
    }

}




int main()
{
    int n,i;
    scanf("%d",&n);
    int *p = (int *)malloc(sizeof(int)*n);
    for(i = 0;i<n;i++)
    {
        scanf("%d",&p[i]);
    }

    bubble_sort(p,n);

    for(i = 0;i<n;i++)
    {
        printf("%d ",p[i]);
    }
    return 0;
}



